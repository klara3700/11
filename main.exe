# random modul importieren für Ziehen von zufälligen Karten
# Variablen definieren von den verschiednen Farbe:suit und Symbol:ranks der Karten, spades-pik, clubs-Kreuz
import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,
          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}

# Boolean Variable für while loop später definieren, wenn der Player agiert

playing = True

# Klassen definieren

#Attribute innerhalb einer Klasse mit der __init__Methode definiert und dann die beiden Variablen
class Card:  # Erstellung verschiedene Karten

    def __init__(self, suit, rank):
        self.suit = suit #optional - zur Vereinfachung
        self.rank = rank

    def __str__(self):  # Methode konvertiert in String, in Klassen wird dabei __str__ verwendet
        return self.rank + ' ' + self.suit    # gibt die Karte mit Symbol und Farbe wieder


class Deck:  # Erstellung Stapel

    def __init__(self):
        self.deck = []  # leer, da Stapel noch nicht erstellt wurde
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))


    def shuffle(self):  # alle Karten des Stapels mischen
        random.shuffle(self.deck)

    def deal(self):  # eine Karte vom Stapel nehmen
        single_card = self.deck.pop() #Karte entnehmen vom Ende des Stapels
        return single_card


class Hand:   # Anzeige aller Karten vom Spieler und Dealer

    def __init__(self):
        self.cards = []
        self.value = 0


    def add_card(self, card):  # Karte dem Dealer oder Player hinzufügen
        self.cards.append(card)
        self.value += values[card.rank]


class Chips:   # trackt den Einsatz

     def __init__(self):
        self.total = 100  #maximalen Einsatz festlegen
        self.bet = 0   # auf null setzen, da der User noch kein Einsatz gegeben hat

     def win_bet(self):
        self.total += self.bet  #Gewinn was man bekommt

     def lose_bet(self):
        self.total -= self.bet   #was man bei einem Verlust bekommt




def take_bet(chips):  # fragen nach dem Einsatz

    while True:
        try:
            chips.bet = int(input("Welchen Wert der Chips möchtest du einsetzen ? "))
        except ValueError:
            print("Bitte nur Zahlen schreiben: ")
        else:
            if chips.bet > chips.total:
                print("bitte nicht mehr als Wert 100 einsetzen!")
            else:
                break


def hit(deck, hand):
    hand.add_card(deck.deal())



def hit_or_stand(deck, hand):
    global playing

    while True:
        ask = input("\nHit oder Stand? Bitte Eingabe 'h' oder 's': ")

        if ask.lower() == 'h':
            hit(deck, hand)
        elif ask.lower() == 's':
            print("Player stand, Dealer spielt.")
            playing = False  #stoppt den Player, damit Dealer spielen kann
        else:
            print("ungültige Eingabe, bitte erneut eingeben!")
            continue
        break


def show_some(player, dealer):   #zeigt den aktuellen Status der beiden Parteien an
    print("\nDealer's Karten: ")
    print(" <1 versteckte Karte>")
    print("", dealer.cards[1])
    print("\nPlayer's Karten: ", *player.cards )


def show_all(player, dealer):
    print("\nDealer's Karten: ", *dealer.cards)
    print("Dealer's Karten =", dealer.value)
    print("\nPlayer's Karten: ", *player.cards)
    print("Player's Karten =", player.value)


# verschiedene Ausgänge

def player_verliert(player, dealer, chips):
    print("Player verliert!")
    chips.lose_bet()


def player_gewinnt(player, dealer, chips):   #Variable dealer, weil er die chips bekommt
    print("PLAYER GEWINNT!")
    chips.win_bet()


def dealer_verliert(player, dealer, chips):
    print("Dealer verliert!")
    chips.win_bet()


def dealer_gewinnt(player, dealer, chips):
    print("Dealer gewinnt!")
    chips.lose_bet()

def gleich(player, dealer):
   print("Unentschieden!")


#aktuelles Spiel mit den Methoden
while True:

    #gemischte Karten
    deck = Deck()
    deck.shuffle()

    player_hand = Hand()     #player zieht zwei Karten
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    dealer_hand = Hand()       #dealer ziehr zwei Karten
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())

   #Players Chips
    player_chips = Chips()

    # player nach dem Einsatz fragen
    take_bet(player_chips)

    # Karten zeigen
    show_some(player_hand, dealer_hand)

    while playing:
#player fragen hit oder stand
        hit_or_stand(deck, player_hand)
        show_some(player_hand, dealer_hand)

        if player_hand.value > 21:
            player_verliert(player_hand, dealer_hand, player_chips)
            break

    if player_hand.value <= 21:

        while dealer_hand.value < 17:    #dealer nimmt nur neue Karten solange sein Wert nicht 17 oder mehr ist
            hit(deck, dealer_hand)

        show_all(player_hand, dealer_hand)

        if dealer_hand.value > 21:
            dealer_verliert(player_hand, dealer_hand, player_chips)

        elif dealer_hand.value > player_hand.value:
            dealer_gewinnt(player_hand, dealer_hand, player_chips)

        elif dealer_hand.value < player_hand.value:
            player_gewinnt(player_hand, dealer_hand, player_chips)

        elif player_hand.value > 21:
            player_verliert(player_hand, dealer_hand, player_chips)
        else:
            gleich(player_hand, dealer_hand)
    print("\nPlayer's aktueller Umsatz ", player_chips.total)

